"use client";

import Quiz from "@/components/Quiz/Quiz";
import CircleLoading from "@/ui/CircleLoading";
import { useState } from "react";
import { categories } from "@/data/categories";

export default function QuizPage() {
  const [startGame, setStartGame] = useState(false);
  const [loadingGame, setLoadingGame] = useState(false);

  const [question, setQuestion] = useState("");
  const [answers, setAnswers] = useState<{ choice: string; answer: string }[]>(
    []
  );
  const [correctAnswer, setCorrectAnswer] = useState("");

  const [category, setCategory] = useState(categories[0]);

  const MAX_RETRIES = 3;

  const handleNewGame = () => {
    setStartGame(true);
    fetchOneQuestion();
  };

  async function fetchOneQuestion(retryCount = 0) {
    setLoadingGame(true);
    try {
      const url = new URL("/api/getQuestions", window.location.origin);
      url.searchParams.set("prompt", category.prompt);
      url.searchParams.set("count", "1");

      const res = await fetch(url.toString());
      if (!res.ok) throw new Error(`HTTP error ${res.status}`);

      // 1) pull out the payload
      const payload = (await res.json()) as {
        data:
          | { question: string; answers: string[]; correctAnswer: string }
          | Array<{
              question: string;
              answers: string[];
              correctAnswer: string;
            }>;
      };

      // 2) normalize arrayâ†’object
      let item = payload.data;
      if (Array.isArray(item)) {
        item = item[0];
      }

      // 3) destructure
      const { question: q, answers: ansArr, correctAnswer: ca } = item;

      // 4) validate
      if (
        typeof q !== "string" ||
        !Array.isArray(ansArr) ||
        ansArr.length !== 3 ||
        !["A", "B", "C"].includes(ca)
      ) {
        if (retryCount < MAX_RETRIES) {
          return fetchOneQuestion(retryCount + 1);
        }
        throw new Error("Invalid question structure after retries");
      }

      // 5) map into your shape
      const mapped = ansArr.map((a, i) => ({
        choice: String.fromCharCode(65 + i),
        answer: a,
      }));

      setQuestion(q);
      setAnswers(mapped);
      setCorrectAnswer(ca);
    } catch (err: any) {
      console.error("Error fetching question:", err);
      if (
        !(err.message as string).startsWith("HTTP") &&
        retryCount < MAX_RETRIES
      ) {
        return fetchOneQuestion(retryCount + 1);
      }
      throw err;
    } finally {
      setLoadingGame(false);
    }
  }

  return (
    <div className="flex flex-col flex-1 w-full max-w-[90rem] mx-auto">
      {!startGame ? (
        <div className="flex flex-col flex-1 md:justify-center items-center font-ibmPlexMono md:gap-y-[10vh] gap-y-[5vh] mt-8 md:mt-0">
          <div className="flex flex-col items-center justify-center gap-y-4">
            <p className="md:text-2xl text-lg text-white text-center">
              How the games works?
            </p>
            <p className="max-w-[40rem] text-[#FFFFFF99] md:text-center text-start md:text-base text-xs">
              {/* Each game has 10 rounds, the questions have 3 multiple choice
              questions and go from easy to hard, the goal is to get a score of
              more than 60%, if successful the user gets rewarded with a win, on
              the other hand if the score is less than 60% the user gets a loss.
              When you are ready click on start game, good luck! */}
              <span className="hidden md:block">
                Each game you get a unique web development question generated by
                openai and have 3 multiple choice answers, the goal is to select
                the right answer, if successful the user gets rewarded with a
                win, otherwise the user gets rewarded with a loss. When you are
                ready click on start game, good luck!
              </span>
              <span className="md:hidden block">
                Each game offers a unique, OpenAI-generated web development
                question with three choices. Answer correctly to win and
                incorrectly to lose. Click "Start Game" when you're ready. Good
                luck!
              </span>
            </p>
          </div>
          <div className="flex flex-col justify-center items-center md:gap-y-6 gap-y-4">
            <p className="text-center lg:text-xl md:text-lg text-base">
              Choose the field of the quiz
            </p>
            <div className="lg:w-[600px] md:w-[400px] mx-auto flex flex-wrap justify-center items-center gap-2">
              {categories.map((item, i) => (
                <button
                  onClick={() => {
                    setCategory(item);
                  }}
                  className={`lg:py-2 lg:px-4 md:py-1.5 md:px-2.5 py-1 px-2 lg:text-base md:text-sm text-xs bg-white text-black rounded-3xl text-center w-fit transition-all duration-300 ease-out cursor-pointer inline-block ${
                    category === item
                      ? "opacity-100"
                      : "opacity-50 hover:opacity-100"
                  }`}
                  key={i}
                >
                  {item.name}
                </button>
              ))}
            </div>
          </div>
          <button
            className="bg-white text-black py-2 px-4 rounded-lg hover:bg-[#FFFFFF99] transition duration-300 ease-out"
            onClick={handleNewGame}
          >
            START GAME
          </button>
        </div>
      ) : loadingGame ? (
        <div className="flex w-full flex-1 items-center justify-center">
          <CircleLoading className="lg:w-10 lg:h-10 md:w-8 md:h-8 h-5 w-5 fill-[#d9d9d9]" />
        </div>
      ) : (
        <Quiz
          setStartGame={setStartGame}
          newRound={fetchOneQuestion}
          question={question}
          answers={answers}
          correctAnswer={correctAnswer}
          category={category.name}
        />
      )}
    </div>
  );
}
